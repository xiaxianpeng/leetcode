package org.example.bit;

/**
 * 191. 位1的个数
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 */
public class HammingWeight {

    /**
     * 算法思路：使用位操作技巧，逐位清除最右边的1直到所有位都为0
     * 具体使用 x & (x - 1) 来移除最右边的1
     */
    public static int hammingWeight(int n) {
        // 计数器，用于记录1的个数
        int count = 0;

        // 当n不等于0时，继续循环
        while (n != 0) {
            System.out.println("当前 n: " + Integer.toBinaryString(n) + " (二进制), " + n + " (十进制)");

            // 使用 n & (n - 1) 技巧移除最右边的1
            n &= (n - 1);

            // 每次移除一个1，计数器加1
            count++;
            System.out.println("更新后 n: " + Integer.toBinaryString(n) + " (二进制), count = " + count);
        }

        // 返回计数器，即1的个数
        System.out.println("最终1的个数: " + count);
        return count;
    }

    public static void main(String[] args) {
        //  输入00000000000000000000000000001011，预期输出: 3
        System.out.println("1的个数为: " + hammingWeight(0b00000000000000000000000000001011));

        //  输入00000000000000000000000010000000，预期输出: 1
        System.out.println("1的个数为: " + hammingWeight(0b00000000000000000000000010000000));

        //  输入11111111111111111111111111111101，预期输出: 31
        System.out.println("1的个数为: " + hammingWeight(0b11111111111111111111111111111101));
    }
}
