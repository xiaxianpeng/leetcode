package org.example.graph;

/**
 * @author xianpeng.xia
 * on 2022/4/8 11:17 PM
 * 有效的数独
 * https://leetcode-cn.com/problems/valid-sudoku/
 * 有效的数独满足以下条件：
 * 每一行必须包含数字 1-9，且不能重复。
 * 每一列必须包含数字 1-9，且不能重复。
 * 数独的每个 3x3 子网格也必须包含数字 1-9，且不能重复。
 */
public class IsValidSudoku {

    public static boolean isValidSudoku(char[][] board) {
        // 行rows: 一个 9x9 的二维数组，跟踪每个数字在每一行中出现的次数。
        int[][] rows = new int[9][9];
        // 列cols: 一个 9x9 的二维数组，跟踪每个数字在每一列中出现的次数。
        int[][] cols = new int[9][9];
        // 九宫格subboxes: 一个 3x3x9 的三维数组，跟踪每个数字在每个 3x3 子网格中出现的次数。
        int[][][] subboxes = new int[3][3][9];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                char c = board[i][j];
                // 处理数字
                if (c != '.') {
                    // 假设 c 是一个表示数字的字符（例如 '1' 到 '9'），该代码的目的是将字符 c 转换为对应的整数值，并减去 1。这个减 1 的操作是因为数独中的数字是 1 到 9，而在数组中我们通常使用 0 到 8 的索引。
                    // 如果 c 是字符 '1'，其 Unicode 码点是 49。那么，c - '0' 就是 49 - 48，结果是整数 1。然后 1 - 1 的结果是整数 0。所以 '1' 对应的 index 就是 0。
                    int index = c - '0' - 1;
                    rows[i][index]++;
                    cols[j][index]++;
                    subboxes[i / 3][j / 3][index]++;
                    // 如果重复返回false
                    if (rows[i][index] > 1 || cols[j][index] > 1 || subboxes[i / 3][j / 3][index] > 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] board = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(isValidSudoku(board));

        board = new char[][]{
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(isValidSudoku(board));
    }
}